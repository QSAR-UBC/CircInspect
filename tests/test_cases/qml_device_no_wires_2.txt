import pennylane as qml
from typing import Callable, Sequence
from pennylane.tape import QuantumTape
import numpy as np
from functools import partial
def load_pattern(pattern):
   for i in range(len(pattern)):
       if pattern[i] == "1":
           qml.PauliX(i)
def move_pattern_to_memory_register(len_of_pattern):
   for i in range(len_of_pattern):
       qml.MultiControlledX([i, len_of_pattern + 1, len_of_pattern + 2 + i])
def fill_with_ones(pattern_len):
   for i in range(pattern_len):
       qml.CNOT([i, pattern_len + 2 + i])
       qml.PauliX(pattern_len + 2 + i)
def flip_u_1(pattern_len):
   qml.MultiControlledX(list(range(pattern_len + 2, pattern_len + pattern_len + 2)) + [pattern_len])
def set_up(number_of_patterns, idx, pattern_len):
   move_pattern_to_memory_register(pattern_len)
   fill_with_ones(pattern_len)
   flip_u_1(pattern_len)
   update_amplitudes(idx, number_of_patterns, pattern_len)
def reset_qubits(len_of_pattern):
   flip_u_1(len_of_pattern)
   fill_with_ones(len_of_pattern)
   move_pattern_to_memory_register(len_of_pattern)
def update_amplitudes(idx, number_of_patterns, len_of_pattern):
   j = number_of_patterns + 1 - (idx +1)
   CS_j = np.array([
       [1,0,0,0],
       [0,1,0,0],
       [0,0, np.sqrt((j - 1)/ j), 1/np.sqrt(j)],
       [0,0, -1/np.sqrt(j), np.sqrt((j - 1) / j)]
   ])
   qml.QubitUnitary(CS_j, wires=[len_of_pattern, len_of_pattern + 1])
dev = qml.device("default.qubit")
@qml.qnode(device=dev)
def storage(patterns, len_of_pattern, num_of_patterns):
   qml.PauliX(3)
   idx = 0
   for pattern in patterns:
        load_pattern(pattern)
        set_up(num_of_patterns, idx, len_of_pattern)
        reset_qubits(len(pattern))
        load_pattern(pattern)
        qml.Barrier()
        idx += 1
   return qml.probs(wires=range(4, 6))
storage(["11", "10"], 2, 2)
